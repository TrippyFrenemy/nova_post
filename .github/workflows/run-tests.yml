name: Run Tests

on:
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
    types: [opened, synchronize, reopened]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run all unit tests
        env:
          NOVA_POST_API_KEY: ${{ secrets.NOVA_POST_API_KEY }}
          NOVA_POST_TRACKING_NUMBER: ${{ secrets.NOVA_POST_TRACKING_NUMBER }}
        run: pytest tests/unit/

  release:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install gh -y

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine build

      - name: Extract current version
        id: version
        run: |
          set -e
          VERSION_FILE="setup.py"
          CURRENT_VERSION=$(grep -Po '(?<=version=")[0-9]+\.[0-9]+\.[0-9]+' $VERSION_FILE)
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "New version: $NEW_VERSION"

      - name: Create new branch
        run: |
          set -e
          BRANCH_NAME="bump-version-$NEW_VERSION"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Update version in setup.py
        run: |
          set -e
          VERSION_FILE="setup.py"
          sed -i "s/version=\"$CURRENT_VERSION\"/version=\"$NEW_VERSION\"/" $VERSION_FILE

      - name: Commit and push new branch
        run: |
          set -e
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add setup.py
          git commit -m "Bump version to $NEW_VERSION"
          git push origin $BRANCH_NAME || (echo "Push failed" && exit 1)

      - name: Create Pull Request
        id: create_pr
        run: |
          set -e
          PR_URL=$(gh pr create --title "Bump version to $NEW_VERSION" --body "Automated version bump to $NEW_VERSION" --base main --head $BRANCH_NAME --repo ${{ github.repository }})
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

  rollback:
    needs: release
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Delete branch and close PR
        run: |
          set +e
          echo "Rolling back release..."
          gh pr close ${{ env.PR_URL }} --repo ${{ github.repository }} --delete-branch || echo "No PR to delete"
          git push origin --delete ${{ env.BRANCH_NAME }} || echo "No branch to delete"
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
